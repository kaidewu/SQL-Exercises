PROCEDURE SYNTAX:
	*(Si usamos aqui USE database tendremos que usar ';')
	DELIMITER $$
	*(Si usamos aqui USE database tendremos que usar '$$')
	CREATE PROCEDURE procedimiento_nombre()
		BEGIN
			sentencias;
	    END $$
	DELIMITER; #Muy importante recuperar el DELIMITER
---------------------------------------------------------
TRIGGER SYNTAX:
	CREATE TRIGGER nombre_del_treigger
		TRIGGER_TIME* TRIGGER_EVENT* ON nombre_de_tabla
	    FOR EACH ROW
		[TRIGGER_ORDER*]
		TREIGGER_BODY
	*TIME = BEDORE|AFTER
	*EVENT = INSERT|UPDATE|DELETE
	*ORDER = FOLLOWS|PRECEDES

-DELETE[old.cosas]
-UPDATE[new.cosas y old.cosas]
-INSERT[new.cosas]
*Nota:
-AUTO_INCREMENT para incrementar, por ejemplo el ID.
---------------------------------------------------------
BUCLES SYNTAX:
	REPEAT accion UNTIL condicion END REPEAT;
	WHILE condicion DO accion END WHILE;
---------------------------------------------------------
Indices:
	CREATE [UNIQUE] INDEX nombre oN nombretabla
---------------------------------------------------------
AUTOCOMMIT
Para desactivar el autocommit es: 'SET autocommit = 0;' o 'SET autocommit = off;'
Y para activar el autocommit es: 'SET autocommit = 1;' o 'SET autocommit = on;' 
Funciona como un checkpoint, por ejemplo:
Desactivado: Creo una tabla 'CREATE TABLE prueba (id INT);' y pongo un 'COMMIT;'. Despues a√±ado valores a la tabla 'INSERTO INTO prueba VALUES(1);', y si hago un 'ROLLBACK;', me devuelve al punto de donde estaba antes de poner un 'COMMIT;'.